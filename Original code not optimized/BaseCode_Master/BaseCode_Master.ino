struct MasterRelay {
  int relayNumber;
  int pin;
  bool state;
};

MasterRelay masterRelays[] = {
  {1, 2, false},  {2, 3, false},  {3, 4, false},  {4, 5, false},
  {5, 6, false},  {6, 7, false},  {7, 8, false},  {8, 9, false},
  {9, 10, false}, {10, 11, false}, {11, 12, false}, {12, 13, false},
  {13, A0, false},
};

const int numMasterRelays = sizeof(masterRelays) / sizeof(masterRelays[0]);

struct SlaveRelay {
  int relayNumber;
  bool state;
};

SlaveRelay slaveRelays[] = {
  {14, false}, {15, false}, {16, false}, {17, false}, {18, false},
  {19, false}, {20, false}, {21, false}, {22, false}, {23, false},
  {24, false}, {25, false}, {26, false}, {27, false}
};

const int numSlaveRelays = sizeof(slaveRelays) / sizeof(slaveRelays[0]);

struct Phase {
  unsigned long duration; // milliseconds
  int activeRelays[27];   // relay numbers that should be ON
  int numRelays;
};

Phase phases[] = {
  {1000, {1, 5,6,7,8,12,13 , 14,18,19,23,24,25,26},14},          // Phase 1 - 30s
  {1000, {2, 5,6,7,9,12,13, 14,18,20,23,24,25,26},14},
  {1000, {3, 5,6,7,10,12,13, 15,18,21,23,24,25,26},14}, 
  {1000, {4, 5,6,7,11,12,13, 16,18,22,23,24,25,26},14},//4colour ruun
  {200,  {1, 5, 8,12,13, 14,18, 19,23,24,25,26,27},14,}, //com.5.6.7. run
   {200, {1, 6, 8,12,13, 14,18, 19,23,24,25,26,27},14}, 
   {200, {1, 7, 8,12,13, 14,18, 19,23,24,25,26,27},14}, 
   {200, {1, 5, 9,12,13, 15,18, 20,23,24,25,26,27},14}, 
   {200, {1, 6, 9,12,13, 15,18, 20,23,24,25,26,27},14}, 
   {200, {1, 7, 9,12,13, 15,18, 20,23,24,25,26,27},14}, 
   {200, {2, 5, 10,13,  16,18,  21,23,24,25,26,27},14}, 
   {200, {2, 6, 10,      16,18, 21,23,24,25,26,27},14}, 
   {200, {2, 7, 11,12,13, 16,18, 21,23,24,25,26,27},14}, 
   {200, {2, 5, 11,12,13, 17,18 ,22,23,24,25,26},14}, 
   {200, {2, 6, 8,9,13,   17,18 ,22,23,24,25,26},14}, 
   {200, {2, 7, 8,9,12,13, 17,18, 22,23,24,25,26},14},
    {200,{3, 5, 9,10,12,13 ,16,14,18, 19,20,23,24,25,26},14}, 
   {200, {3, 6, 9,10,12,13, 16,14,18, 19,20,24,25,26},14}, 
   {200, {3, 7, 9,10,12,13, 15,16,18, 19,20,24,25,26},14}, 
   {200, {3, 5, 9,10,12,13, 15,16,18, 20,21,24,25,26},14}, 
   {200, {3, 6, 8,10,12,13, 15,16,18, 20,21,24,25,26},14}, 
   {200, {3, 7, 8,10,12,13, 14,16,18 ,20,21,24,25,26},14},
  {200,  {4, 7, 11,12,13, 14,16,18, 19,21,24,25,26},14}, 
   {200, {4, 5, 11,12,13, 14,16,18, 19,21,24,25,26},14}, 
   {200, {4, 6, 11,12,13, 14,16,18, 19,21,24,25,26},14}, 
   {200, {4, 7, 12,8,13, 16,18, 20,21,23,24,25,26},14},
  {200,  {4, 7, 11,8,12,13, 16,18, 20,23,24,25,26},14}, 
   {200, {4, 5, 11,8,12,13, 16,18, 21,23,24,25,26},14}, 
{250,  {1,3, 5, 6,17,11,8,12,13,17,18,22,24,25,26,},14,},//vio flash
{250,  {2, 8,},14,},
{275,  {1,3, 5,6,7,11 ,8,12,13,17,18,22,23,24,25,26,},14},//vio flash
{250,  {2, 8,},14,},
{275,  {1,3, 5,6,7,11 ,8,12,13,17,18,22,23,24,25,26,},14},
{200, {1,2, 5, 8,12,13, 17,18, 19,25,26,27},14}, 
{200, {1,2, 6, 8,12,13, 16,18, 19,24,26,27},14}, 
{200, {1,2, 7, 8,12,13, 15,18, 19,23,26,27},14}, 
{200, {1,2, 6, 8,9,12,13, 14,18, 19,25,26,27},14},
{200, {1,2, 5, 8,9,12,13, 16,18, 19,24,26,27},14}, 
{200, {1,2, 6, 8,9,12,13, 15,16, 19,23,26,27},14}, 
{200, {1,2, 7, 8,10,12,13, 14,16,18, 22,23,24,25,26,27},14}, 
{200, {1,2, 6, 8,10,12,13, 17,16,18, 22,23,24,25,26,27},14},
{200, {1,2,5,9,10,12,13, 16,18, 20,23,26,27},14}, 
{200, {2, 6, 9,10,12,13, 16,18, 20,24,26,27},14}, 
{200, {1,2,7, 9,10,12,13, 16,18, 20,25,26,27},14},
{1000, {1,2,5, 6,7, 9,13,12,15,18, 21,20,23,24,25,26,27},14},
{1000, {1,2,5, 6,7, 10,12,13,16,18, 20,19,23,24,25,26,27},14},
{1000, {1,3, 5,6,7, 8,12,13, 15,18, 21,19,24,25,26,27},14},
{1000, {1,3, 5,6,7, 9,12,13, 16,18, 22,19,23,24,25,26,27},14},
{1000, {2,3,5,6,7,8,9,12,13, 14,18, 22,23,24,25,26,27},14},
{1000, {2,3,5,6,7,10,9,12,13, 16,18, 22,23,24,25,26,27},14},
{200, {1,  5,6,7,  10,12,13, 16,18, 19,23,26,27},14}, 
{200, {1,  6,7,   11,12,13, 16,18, 20,24,26,27},14}, 
{200, {1,  5,7,  11,12,13, 16,18, 21,25,26,27},14},
{200, {1,5,6 , 11,12,13, 16,18, 22,23,24,25,26,27},14}, 
{200, {1,6,7, 11,12,13, 16,18, 22,23,24,25,26,27},14}, 
{200, {1, 5,6, 8,9,12,13, 16,18, 22,23,24,25,26,27},14},
{250,  {3, 5, 6,17,11,8,12,13,17,18, 22,24,25,26,},14,},//bl flash
{250,  {2, 8,},14,},
{275,  {3, 5,6,7,11 ,8,12,13,17,18, 22,23,24,25,26,},14},//bl flas
{800,  {1, 5,  8,9,12,13, 14,16,18, 19,21,23,24,25,26,27},14,},
{750 , {1, 6, 8,9,12,13, 14,15,18, 19,20,23,24,25,26,27},14,},
{700,  {1, 7, 8,9,12,13, 14,16,18, 19,21,23,24,25,26,27},14,},
{650,  {1, 5, 8,10,12,13, 14,16,18, 19,25,26,27},14,},
{600,  {1, 6, 8,10,12,13, 15,16,18, 19,24,26,27},14,},
{550,  {1, 7, 8,10,12,13, 15,16,18, 19,23,26,27},14,},
{500,  {1, 5, 9,10,12,13, 15,16,18, 19,21,25,26,27},14,},
{450,  {1, 6, 9,12,13, 17,18 ,19,21,24,26,27},14,},
{400,  {1, 7, 8,12,13, 17,18, 19,21,23,26,27},14,},
{350,  {1, 5, 8,12,13, 17,18, 20,21,25,26,27},14,},
{300,  {1, 6, 8,12,13, 17,18, 20,21,24,26,27},14,},
{250,  {1, 7, 8,12,13, 14,16,18, 20,21,23,24,25,26,27},14,},
{200,  {1, 5, 8,12,13, 14,16,18, 20,21,24,26,27},14,},
{150,  {1, 5,  8,12,13, 14,16,18, 20,21,25,26,27},14,},
{120 , {1, 6, 8,12,13, 16,18 ,20,21,23,26,27},14,},
{110,  {1,7,  8,12,13, 16,18, 20,21,24,25,26,27},14,},
{100, {1, 5, 8,12,13, 16,18, 20,21 ,25,26,27},14,},
{90,  {1, 6, 8,12,13, 16,18, 22,23,26,27},14,},
{87,  {2, 7, 11,12,13, 17, 18, 22,24,26,27},14,},
{88,  {2, 5, 11,12,13, 14, 18, 22,25,26,27},14,},
{90,  {2, 6, 11,12,13, 1, 18, 22,23,26,27},14,},
{95,  {2, 7, 11,13,16,    18, 22,24,26,27},14,},
{100,  {2, 5, 11,12,13, 16, 18, 22,25,26,27},14,},
{100,  {2, 5,  10,11,12,13 ,16,18, 19,21,23,26,27},14,},
{150 , {2, 6, 10,11,12,13, 16,18, 19,20,24,26,27},14,},
{200,  {2, 7, 8,12,13, 16,18, 20,21,25,26,27},14,},
{250,  {2, 5, 8,12,13, 15,18, 19,20,24,26,27},14,},
{300, {2, 6, 8,12,13, 15,18, 19,21,23,25,26,27},14,},
{350,  {2, 7, 8,12,13, 15,18, 19,20,24,26,27},14,},
{400,  {2, 5, 9,10,12,13, 15,18, 20,21,25,26,27},14,},
{550,  {2, 6, 9,10,12,13, 15,18, 19,20,24,26,27},14,},
{575,  {2, 7, 9,10,12,13, 14,18, 19,21,23,26,27},14,},
{600,  {2, 6, 8,12,13, 14,18, 19,20,24,26,27},14,},
{650,  {2, 7, 8,12,13, 14,18, 20,21,25,26,27},14,},
{50,  {4, 5, 6,17,11,8,12,13,17,18,22,24,25,26,},14,},//white flash
{50,  {2, 8,},14,},
{75,  {4, 5,6,7,11 ,8,12,13,17,18,22,23,24,25,26,},14},//white flash
{50,  {2, 8,},14,},
{75,  {4, 5,6,7,11 ,8,12,13,17,18,22,23,24,25,26,},14},
{50,  {2, 8,},14,},//white flash
{75,  {4, 5,6,7,11 ,8,12,13,17,18,22,23,24,25,26,},14},//white flash
{50,  {2, 8,},14,},
{50,  {2, 8,},14,},//white flash
{75,  {4, 5,6,7,11 ,8,12,13,17,18,22,23,24,25,26,},14},//white flash
{50,  {2, 8,},14,},
{75,  {4, 5,6,7,11 ,8,12,13,17,18,22,23,24,25,26,},14},//white flash
{1500,  {4,11 ,8,17,22,},14},//all off
{1000,  {26,14,},14},//start red
{1000, {19,14,22,23,24,25,26},14},//second red
{1000,  {14,18,19,22,23,24,25,26},14},//3rd red
{1000,  {8,12,13,14,18,19,22,23,24,25,26},14},//4th red
{1000,  {1,5,6,7,8,12,13,14,18,19,22,23,24,25,26},14},
{150,  {9,12,13,15,18,20,22,23,24,25,26},14},//green
{150,  {15,18,20,22,23,24,25,26},14},
{150, {20,14,22,23,24,25,26},15},
{150,  {26,14,},15},
{150,  {26,16,},15},
{150, {19,21,14,16,18,23,24,25,26},14},//second red
{150,  {15,14,18,19,20,22,23,24,25,26},14},//3rd red
{150,  {9,8,12,13,15,18,20,22,23,24,25,26},14},//4th red
{150,  {1,2,5,6,7,9,12,13,15,18,20,22,23,24,25,26},14},
{150,  {9,12,13,15,18,20,22,23,24,25,26},14},
{150,  {15,18,20,22,23,24,25,26},14},
{150, {20,14,22,23,24,25,26},15},
{150,  {26,14,},15},
{50,  {15,16,26,},14,},//white flash
{75,  {23,24,25,19,21 ,},14},//white flash
{50,  {14,15,18,},14,},
{75,  {9,10,12,13},14},
{75,  {5,6,7,1,3,4},14}

};

const int numPhases = sizeof(phases) / sizeof(phases[0]);
int currentPhase = 0;
unsigned long phaseStartTime = 0;

void setup() {
  Serial.begin(9600);
  for (int i = 0; i < numMasterRelays; i++) {
    pinMode(masterRelays[i].pin, OUTPUT);
    digitalWrite(masterRelays[i].pin, LOW);
  }
  delay(1000);
  applyPhase(phases[currentPhase]);
  phaseStartTime = millis();
}

void loop() {
  unsigned long now = millis();
  if (now - phaseStartTime >= phases[currentPhase].duration) {
    currentPhase = (currentPhase + 1) % numPhases;
    applyPhase(phases[currentPhase]);
    phaseStartTime = now;
  }
}

void applyPhase(const Phase &p) {
  // Turn all master relays OFF
  for (int i = 0; i < numMasterRelays; i++) {
    digitalWrite(masterRelays[i].pin, LOW);
    masterRelays[i].state = false;
  }

  // Turn ON selected master relays
  for (int i = 0; i < p.numRelays; i++) {
    int relayNum = p.activeRelays[i];
    for (int j = 0; j < numMasterRelays; j++) {
      if (masterRelays[j].relayNumber == relayNum) {
        digitalWrite(masterRelays[j].pin, HIGH);
        masterRelays[j].state = true;
        break;
      }
    }
  }

  // Update slave relays
  sendSlavePhaseCommand(p);
}

void sendSlavePhaseCommand(const Phase &p) {
  Serial.print("U");
  for (int i = 0; i < numSlaveRelays; i++) {
    bool shouldBeOn = false;
    for (int j = 0; j < p.numRelays; j++) {
      if (slaveRelays[i].relayNumber == p.activeRelays[j]) {
        shouldBeOn = true;
        break;
      }
    }
    slaveRelays[i].state = shouldBeOn;
    Serial.print(",");
    Serial.print(slaveRelays[i].relayNumber);
    Serial.print(":");
    Serial.print(shouldBeOn ? 1 : 0);
  }
  Serial.println();
}
